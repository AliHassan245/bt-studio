{"version":3,"sources":["components/Layout/Sidebar/SidebarItem.js"],"names":["SidebarItem","props","text","to","icon","current","LinkRender","ElementRender","onClick","className","orientation","rest","tooltipVisible","setTooltipVisibility","classList","handleTooltipToggle","charAt","propTypes","PropTypes","string","isRequired","IconProp","bool","elementType","func","oneOf","defaultProps","undefined","SidebarLink","React","memo"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport SidebarLink from './SidebarLink';\nimport Tooltip from '../../Elements/Tooltip';\nimport { IconProp, makeIconFromProp } from '../../../shared';\n\nimport './sidebar-item.scss';\n\n/**\n * Sidebar navigation item\n */\nconst SidebarItem = (props) => {\n  const { text, to, icon, current, LinkRender, ElementRender, onClick, className, orientation, ...rest } = props;\n  const [tooltipVisible, setTooltipVisibility] = useState(false);\n\n  const classList = useMemo(() => classNames('bi bi-sidebar-nav-item', {\n    'selected-sidebar-item': current,\n  }, className), [current, className]);\n\n  const handleTooltipToggle = useCallback(() => {\n    setTooltipVisibility(!tooltipVisible);\n  }, [tooltipVisible]);\n\n  return (\n    <ElementRender className={classList} {...rest}>\n      <LinkRender to={to} onClick={onClick}>\n        {icon && (\n          <span className=\"bi-sidebar-icon\">\n            {makeIconFromProp(icon)}\n          </span>\n        )}\n        <span className=\"bi-sidebar-item-content\">\n          {text}\n        </span>\n        <Tooltip\n          isOpen={tooltipVisible}\n          onToggle={handleTooltipToggle}\n          placement={orientation === 'left' ? 'right-center' : 'left-center'}\n          trigger={(\n            <div className=\"bi-sidebar-item-shrunk\">\n              {!icon && typeof text === 'string' && (<span className=\"shrunk-text\">{text.charAt(0)}</span>)}\n              {icon && makeIconFromProp(icon)}\n            </div>\n          )}\n        >\n          {text}\n        </Tooltip>\n      </LinkRender>\n    </ElementRender>\n  );\n};\n\n\nSidebarItem.propTypes = {\n  text: PropTypes.string.isRequired,\n  to: PropTypes.string,\n  icon: IconProp,\n  current: PropTypes.bool,\n  LinkRender: PropTypes.elementType,\n  onClick: PropTypes.func,\n  orientation: PropTypes.oneOf(['left', 'right']),\n  ElementRender: PropTypes.elementType,\n};\n\nSidebarItem.defaultProps = {\n  to: undefined,\n  icon: undefined,\n  current: false,\n  LinkRender: SidebarLink,\n  onClick: undefined,\n  orientation: 'left',\n  ElementRender: 'li',\n};\n\nexport default React.memo(SidebarItem);\n"],"file":"SidebarItem.js"}