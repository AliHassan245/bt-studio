{"version":3,"sources":["components/Layout/Sidebar/Sidebar.js"],"names":["enrichChild","child","orientation","SidebarCollapsible","SidebarDivider","SidebarItem","React","cloneElement","Sidebar","memo","props","isOpen","onToggle","title","titleColor","headerLogo","showToggle","toggleIcon","accent","type","transitionType","className","children","HeaderRender","ElementRender","NavRender","rest","classList","Children","map","propTypes","PropTypes","bool","isRequired","func","Color","string","oneOfType","element","elementType","IconProp","oneOf","defaultProps","undefined","SidebarHeader","Item","Collapsible","Divider","Group","SidebarGroup"],"mappings":"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","sourcesContent":["import React, { useMemo, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Color, IconProp, checkOnAllowedChildren } from '../../../shared';\nimport SidebarItem from './SidebarItem';\nimport SidebarCollapsible from './SidebarCollapsible';\nimport SidebarGroup from './SidebarGroup';\nimport SidebarHeader from './SidebarHeader';\nimport SidebarDivider from './SidebarDivider';\n\n// styles\nimport './sidebar.scss';\n\nconst enrichChild = (child, orientation) => {\n  checkOnAllowedChildren(child, [SidebarCollapsible, SidebarDivider, SidebarItem], 'Sidebar');\n\n  return React.cloneElement(child, { orientation });\n};\n\n/**\n * A Sidebar component is a left or right side panel used to provide navigational information to the user.<br />\n * It can either be permanently on-screen or toggled off-screen by a navigation menu icon.<br />\n *\n * It provides access to its sub-components by the following shortcuts:<br />\n *\n * - `Sidebar.Item`: defines a single sidebar item\n * - `Sidebar.Collapsible`: groups together components of type Sidebar.Item and/or Sidebar.Divider\n * - `Sidebar.Divider`: shows a divider line between items\n */\n// the React.memo has been used here rather than on the export line to avoid wrapping the shortcut.\nconst Sidebar = React.memo((props) => {\n  const {\n    isOpen, onToggle, title, titleColor, headerLogo, showToggle, toggleIcon, accent, orientation,\n    type, transitionType, className, children, HeaderRender, ElementRender, NavRender, ...rest\n  } = props;\n\n  // defines class list\n  const classList = useMemo(() => classNames('bi bi-sidebar', {\n    'sidebar-open': isOpen,\n    [`sidebar-${accent}`]: !!accent,\n    [`sidebar-${orientation}`]: !!orientation,\n    [`sidebar-${type}`]: !!type,\n    [`sidebar-${transitionType}`]: !!transitionType,\n  }, className), [isOpen, type, accent, orientation, transitionType, className]);\n\n  return (\n    <ElementRender className={classList} {...rest}>\n      <HeaderRender\n        title={!title && !headerLogo ? 'Sidebar' : title}\n        titleColor={titleColor}\n        showToggle={showToggle}\n        toggleIcon={toggleIcon}\n        logo={headerLogo}\n        onToggle={onToggle}\n      />\n      <NavRender className=\"bi-sidebar-navigation\">\n        <ul>\n          {Children.map(children, (child) => enrichChild(child, orientation))}\n        </ul>\n      </NavRender>\n    </ElementRender>\n  );\n});\n\nSidebar.propTypes = {\n  /**\n   * Defines whether the sidebar is open or closed\n   */\n  isOpen: PropTypes.bool.isRequired,\n  /**\n   * The handler to be performed when clicking on the sidebar toggle\n   */\n  onToggle: PropTypes.func,\n  /**\n   * Defines the sidebar accent colour,\n   */\n  accent: Color,\n  /**\n   * Defines the header's title\n   */\n  title: PropTypes.string,\n  /**\n   * Defines the header's title color\n   */\n  titleColor: Color,\n  /**\n   * Any React element to be placed as a logo\n   */\n  headerLogo: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  /**\n   * Set the sidebar's toggle icon (the toggle is the button at the sidebar's top)\n   */\n  toggleIcon: IconProp,\n  /**\n   * Defines whether to sidebar's toggle is shown or not\n   */\n  showToggle: PropTypes.bool,\n  /**\n   * Defines whether the sidebar left or right orientated\n   */\n  orientation: PropTypes.oneOf(['left', 'right']),\n  /**\n   * Defines the sidebar's type\n   */\n  type: PropTypes.oneOf(['shrinkable', 'offcanvas']),\n  /**\n   * Defines the sidebar transition should be by translate the sidebar or its left/right margin\n   */\n  transitionType: PropTypes.oneOf(['translate', 'margin']),\n  /**\n   * A renderer to replace the standard sidebar Header component\n   */\n  HeaderRender: PropTypes.elementType,\n  /**\n   * A renderer to replace the standard sidebar element\n   */\n  ElementRender: PropTypes.elementType,\n  /**\n   * A renderer to replace the standard nav element\n   */\n  NavRender: PropTypes.elementType,\n};\n\nSidebar.defaultProps = {\n  onToggle: undefined,\n  accent: 'primary',\n  title: undefined,\n  titleColor: 'default',\n  headerLogo: undefined,\n  toggleIcon: 'bars',\n  showToggle: true,\n  HeaderRender: SidebarHeader,\n  orientation: 'left',\n  type: 'shrinkable',\n  transitionType: 'translate',\n  ElementRender: 'aside',\n  NavRender: 'nav',\n};\n\n\nSidebar.Item = SidebarItem;\nSidebar.Collapsible = SidebarCollapsible;\nSidebar.Divider = SidebarDivider;\nSidebar.Group = SidebarGroup;\n\nexport default Sidebar;\n"],"file":"Sidebar.js"}