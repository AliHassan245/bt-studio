{"version":3,"sources":["components/Layout/NotificationsStack/NotificationsStack.js"],"names":["NotificationsStack","props","notifications","onChange","NotificationRender","position","animation","color","rest","onClose","notification","nextNotifications","filter","item","classList","map","id","propTypes","PropTypes","arrayOf","shape","number","isRequired","content","string","title","icon","IconProp","avatar","timeout","oneOfType","bool","closable","func","oneOf","elementType","defaultProps","undefined","Notification","React","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport Portal from '../../Elements/_Portal';\nimport Notification from './Notification';\nimport IconProp from '../../../shared/types/IconProp';\n\n// styles\nimport './notification-stack.scss';\n\n\n/**\n * The NotificationsStack component is used to manage notifications appearance.\n * A notification is a tiny customizable modal positioned over everything else in the document.\n */\nconst NotificationsStack = (props) => {\n  const { notifications, onChange, NotificationRender, position, animation, color, ...rest } = props;\n\n  // onClose function will be run on timeout or when closing the notification\n  const onClose = (notification) => {\n    const nextNotifications = notifications.filter((item) => !isEqual(notification, item));\n\n    onChange(nextNotifications);\n  };\n\n  const classList = classNames('bi-notifications-wrapper', {\n    [`bi-ns-${position}`]: !!position,\n    [`bi-ns-${animation}`]: !!animation,\n    [`bi-ns-${color}-color`]: !!color,\n  });\n\n  return (\n    <Portal id=\"bi-notification-stack\">\n      <div className={classList} {...rest}>\n        {notifications && notifications.map((item) => (\n          <NotificationRender {...item} onClose={() => onClose(item)} key={item.id} />\n        ))}\n      </div>\n    </Portal>\n  );\n};\n\nNotificationsStack.propTypes = {\n  /**\n   * This prop defines the array of notifications.\n   * Each notification must have an id property in order to have an exactly reference to the notification\n   * that is going to be removed.\n   * Object description:\n   * `id`: unique id to identify the notification into notifications array\n   * `content`: the content to show into the notification\n   * `title`: the notification title, it will be shown above the content\n   * `icon`: the icon to show in the left notification side\n   * `avatar`: the avatar to show in the left notification side\n   * `timeout`: the notification life time. Could be false if the notification must be close be user input.\n   * `closable`: false if the close icon button should be removed. Default is true.\n   */\n  notifications: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    content: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    icon: IconProp,\n    avatar: PropTypes.string,\n    timeout: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    closable: PropTypes.bool,\n  })),\n  /**\n   * This prop is the function that will run on notification close or timeout.\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\n   * This prop defines where the notification should be place over the page.\n   */\n  position: PropTypes.oneOf(['top-center', 'bottom-center', 'top-right', 'top-left', 'bottom-right', 'bottom-left']),\n  /**\n   * This prop could be use to render a different notification from the default one.\n   */\n  NotificationRender: PropTypes.elementType,\n  /**\n   * This prop defines what kind of animation should be performed\n   */\n  animation: PropTypes.oneOf(['none', 'fade', 'zoom', 'slide-right', 'slide-top', 'slide-left', 'slide-bottom']),\n  /**\n   * The notification color\n   */\n  color: PropTypes.oneOf(['info', 'success', 'warning', 'danger', 'default']),\n};\n\nNotificationsStack.defaultProps = {\n  notifications: undefined,\n  position: 'top-right',\n  NotificationRender: Notification,\n  animation: 'slide-right',\n  color: 'default',\n};\n\nexport default React.memo(NotificationsStack);\n"],"file":"NotificationsStack.js"}