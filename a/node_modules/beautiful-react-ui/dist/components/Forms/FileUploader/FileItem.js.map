{"version":3,"sources":["components/Forms/FileUploader/FileItem.js"],"names":["toMb","size","FileItem","file","removeLabel","uploadingLabel","uploadingFn","onRemove","rest","name","type","preview","setPreview","byteSent","setByteSent","isUploading","setIsUploading","isPreviewable","includes","reader","FileReader","onload","e","target","result","readAsDataURL","next","data","loading","onRemoveClick","stopPropagation","fileIcons","undefined","propTypes","PropTypes","instanceOf","File","isRequired","func","string","defaultProps","React","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport List from '../../Layout/List';\nimport Button from '../../Elements/Button';\nimport Paragraph from '../../Typography/Paragraph';\nimport fileIcons from './fileIcons';\nimport Avatar from '../../Elements/Avatar';\nimport ProgressBar from '../../Elements/ProgressBar';\n\nimport './file-item.scss';\n\nconst toMb = (size) => `${size / 1000000}MB`;\n\n/**\n * Single file item\n */\nconst FileItem = ({ file, removeLabel, uploadingLabel, uploadingFn, onRemove, ...rest }) => {\n  const { name, size, type } = file;\n  const [preview, setPreview] = useState();\n  const [byteSent, setByteSent] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  const isPreviewable = useMemo(() => ['image/png', 'image/jpeg', 'image/jpg', 'image/gif'].includes(type), [type]);\n\n  useEffect(() => {\n    if (isPreviewable) {\n      const reader = new FileReader();\n      reader.onload = (e) => setPreview(e.target.result);\n      reader.readAsDataURL(file);\n    }\n  }, [isPreviewable]);\n\n\n  useEffect(() => {\n    if (uploadingFn && !isUploading && byteSent <= 0) {\n      const next = (data) => {\n        setByteSent(data.byteSent);\n        setIsUploading(data.loading);\n      };\n\n      uploadingFn(file, next);\n    }\n  }, [uploadingFn, isUploading, byteSent]);\n\n  const onRemoveClick = useCallback((e) => {\n    e.stopPropagation();\n    onRemove(e);\n  }, [onRemove, file.name, file.size]);\n\n  return (\n    <List.Item className=\"bi bi-file-item\" icon={!isPreviewable ? (fileIcons[type] || 'file') : undefined} {...rest}>\n      {isPreviewable && preview && <Avatar src={preview} />}\n      <div className=\"bi-file-info\">\n        <Paragraph>{name}</Paragraph>\n        <Paragraph tiny className=\"bi bi-file-size\">{toMb(size)}</Paragraph>\n        {isUploading && <ProgressBar completed={100 * (byteSent / file.size)} />}\n      </div>\n      <Button color=\"transparent\" onClick={onRemoveClick} spinner={isUploading} disabled={isUploading}>\n        {!isUploading ? removeLabel : uploadingLabel}\n      </Button>\n    </List.Item>\n  );\n};\n\nFileItem.propTypes = {\n  file: PropTypes.instanceOf(File).isRequired,\n  uploadingFn: PropTypes.func,\n  onRemove: PropTypes.func.isRequired,\n  removeLabel: PropTypes.string,\n  uploadingLabel: PropTypes.string,\n};\n\nFileItem.defaultProps = {\n  removeLabel: 'Remove',\n  uploadingLabel: 'Uploading',\n  uploadingFn: undefined,\n};\n\nexport default React.memo(FileItem);\n"],"file":"FileItem.js"}