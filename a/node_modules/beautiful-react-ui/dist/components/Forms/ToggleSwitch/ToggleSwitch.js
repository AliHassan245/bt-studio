"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.weak-map");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.symbol");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.to-string");

require("core-js/modules/es6.object.keys");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _shared = require("../../../shared");

var _HelpText = _interopRequireDefault(require("../_HelpText"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ToggleSwitch = function ToggleSwitch(props) {
  var value = props.value,
      onChange = props.onChange,
      color = props.color,
      disabled = props.disabled,
      helpText = props.helpText,
      className = props.className,
      SwitchRender = props.SwitchRender,
      RailRender = props.RailRender,
      rest = _objectWithoutProperties(props, ["value", "onChange", "color", "disabled", "helpText", "className", "SwitchRender", "RailRender"]);

  var classList = (0, _react.useMemo)(function () {
    return (0, _classnames.default)('bi bi-toggle', "bi-toggle-".concat(color), {
      disabled: disabled,
      toggled: value
    }, className);
  }, [value, color, className, disabled]);
  var onClick = !disabled ? (0, _shared.makeCallback)(onChange, !value) : undefined;
  var onKeyUp = !disabled ? (0, _shared.makeKeyboardCallback)(onChange, !value) : undefined;
  return _react.default.createElement("div", _extends({
    className: classList
  }, rest), _react.default.createElement(RailRender, {
    className: "bi-toggle-rail",
    role: "button",
    tabIndex: 0,
    onClick: onClick,
    onKeyUp: onKeyUp
  }, _react.default.createElement(SwitchRender, {
    className: "bi-toggle-switch"
  })), helpText && _react.default.createElement(_HelpText.default, {
    text: helpText
  }));
};

ToggleSwitch.propTypes = {
  value: _propTypes.default.bool,
  onChange: _propTypes.default.func,
  color: _shared.Color,
  helpText: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  SwitchRender: _propTypes.default.elementType,
  RailRender: _propTypes.default.elementType
};
ToggleSwitch.defaultProps = {
  value: false,
  onChange: undefined,
  color: 'success',
  helpText: undefined,
  disabled: false,
  SwitchRender: 'div',
  RailRender: 'div'
};
var _default = ToggleSwitch;
exports.default = _default;
//# sourceMappingURL=ToggleSwitch.js.map
