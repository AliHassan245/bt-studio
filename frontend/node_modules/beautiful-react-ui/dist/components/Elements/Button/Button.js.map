{"version":3,"sources":["components/Elements/Button/Button.js"],"names":["Button","props","type","fluid","color","rounded","outline","disabled","size","icon","hover","spinner","onClick","pill","className","ElementRender","children","rest","lastChild","firstChild","classList","Pill","onClickHandler","propTypes","Color","Size","PropTypes","bool","oneOf","oneOfType","func","IconProp","instanceOf","Spinner","PillProp","elementType","defaultProps","undefined","React","memo"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Spinner from '../Spinner';\nimport Pill from '../Pill';\nimport {\n  makeIconFromProp,\n  makeCallback,\n  emptyChildren,\n  getLastChild,\n  getFirstChild,\n  makeSpinnerFromProp,\n  makePillFromProp,\n  Size,\n  Color,\n  IconProp,\n  PillProp,\n} from '../../../shared';\n\nimport './button.scss';\n\n/**\n * Button components are used to provide a visual indication user actions.\n */\nconst Button = (props) => {\n  const {\n    type, fluid, color, rounded, outline, disabled, size, icon, hover, spinner, onClick, pill,\n    className, ElementRender, children, ...rest\n  } = props;\n\n  const lastChild = getLastChild(children);\n  const firstChild = getFirstChild(children);\n\n  const classList = classNames('bi bi-btn', `btn-${color}`, {\n    'btn-fluid': fluid,\n    'btn-outline': outline,\n    'btn-rounded': rounded,\n    'btn-he-zoom': hover === 'zoom',\n    'btn-he-float': hover === 'float' || hover === true,\n    'btn-he-shrink': hover === 'shrink',\n    'btn-he-refl': hover === 'reflection',\n    'btn-he-rnd': hover === 'round',\n    'btn-sm': size === 'small',\n    'btn-lg': size === 'large',\n    'btn-icon-only': emptyChildren(children),\n    'btn-lci': lastChild && typeof lastChild !== 'string',\n    'btn-fcp': firstChild && firstChild.type === Pill,\n  }, className);\n\n  const onClickHandler = useCallback(makeCallback(onClick), [onClick]);\n\n  return (\n    <ElementRender disabled={disabled} type={type} onClick={onClickHandler} className={classList} {...rest}>\n      {/* Generate icon if exists */}\n      {!!icon && makeIconFromProp(icon)}\n      {/* Generate spinner if exists */}\n      {!!spinner && makeSpinnerFromProp(spinner, { size })}\n      {/* Generate pill if exists */}\n      {children}\n      {!!pill && makePillFromProp(pill)}\n    </ElementRender>\n  );\n};\n\nButton.propTypes = {\n  /**\n   * Defines the button color, can be `default`, `primary`, `secondary`, `info`, `warning`, `success`, `danger`\n   * or `transparent`\n   */\n  color: Color,\n  /**\n   * Defines the button's size, can be `small`, `default`, `large`\n   */\n  size: Size,\n  /**\n   * Shows the outlines only\n   */\n  outline: PropTypes.bool,\n  /**\n   * Makes the button rounded\n   */\n  rounded: PropTypes.bool,\n  /**\n   * Defines the button's type\n   */\n  type: PropTypes.oneOf(['submit', 'button', 'reset']),\n  /**\n   * Disables the button\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Makes the button completely fluid (full width)\n   */\n  fluid: PropTypes.bool,\n  /**\n   * Defines the hover effect, can be `round`, `zoom`,  `shrink`,  `float`, `reflection`\n   */\n  hover: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['round', 'zoom', 'shrink', 'float', 'reflection']),\n  ]),\n  /**\n   * Attaches a callback to the 'click' event\n   */\n  onClick: PropTypes.func,\n  /**\n   * Shows an icon, you can pass both a valid Icon component name prop or the instance of an Icon component\n   */\n  icon: IconProp,\n  /**\n   * Shows a spinner icon within the button. The prop value can be \"true\" to show a standard <Spinner />\n   * or the actual instance of a <Spinner /> component.\n   * If the prop value is \"false\" or any falsy value (undefined or null) the spinner won't show.\n   */\n  spinner: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.instanceOf(Spinner),\n  ]),\n  /**\n   * Show a pill into the button. You can pass both a valid pill label prop or the instance of an pill component\n   */\n  pill: PillProp,\n  /**\n   * A renderer to replace the button element\n   */\n  ElementRender: PropTypes.elementType,\n};\n\nButton.defaultProps = {\n  color: 'default',\n  size: 'default',\n  rounded: false,\n  outline: false,\n  fluid: false,\n  type: 'button',\n  disabled: false,\n  hover: undefined,\n  icon: undefined,\n  spinner: false,\n  onClick: null,\n  pill: undefined,\n  ElementRender: 'button',\n};\n\nexport default React.memo(Button);\n"],"file":"Button.js"}