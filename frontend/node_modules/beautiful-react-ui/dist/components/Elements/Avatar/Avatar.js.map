{"version":3,"sources":["components/Elements/Avatar/Avatar.js"],"names":["Avatar","props","src","alt","shape","initials","size","state","pill","displayName","furtherInfo","ImageRender","TextRender","ElementRender","className","rest","classList","slice","propTypes","Size","PropTypes","oneOf","string","PillProp","elementType","defaultProps","undefined","Image","Paragraph","React","memo"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Image from '../Image';\nimport Paragraph from '../../Typography/Paragraph';\nimport { makePillFromProp, PillProp, Size, warn } from '../../../shared';\n\nimport './avatar.scss';\n\n/**\n * The Avatar component is meant to give visual information about a user picture picture or her/his name initials as\n * replacement.<br />\n * Additionally it can show the user display name or further information, if provided.\n */\nconst Avatar = (props) => {\n  const {\n    src, alt, shape, initials, size, state, pill, displayName, furtherInfo, ImageRender, TextRender, ElementRender,\n    className, ...rest\n  } = props;\n\n  if (!initials && !src) {\n    warn('Avatar component cannot render since \\'src\\' nor \\'initials\\' prop has been provided');\n    return null;\n  }\n\n  const classList = useMemo(() => classNames('bi bi-avatar', {\n    'avt-sm': size === 'small',\n    'avt-lg': size === 'large',\n    'avt-rounded': shape === 'rounded',\n    'avt-square': shape === 'square',\n    'avt-initials': initials,\n  }, className), [size, shape, initials]);\n\n  return (\n    <>\n      <ElementRender className={classList} {...rest}>\n        <div className=\"bi-avatar-item\">\n          {src && (<ImageRender src={src} alt={alt} rounded={shape === 'rounded'} />)}\n          {initials && (<span className=\"initials\">{initials.slice(0, 2)}</span>)}\n        </div>\n        {pill && makePillFromProp(pill)}\n        {state && <span className={`avt-state state-${state}`} />}\n      </ElementRender>\n      {(displayName || furtherInfo) && (\n        <div className=\"bi-avatar-info\">\n          {displayName && (\n            <TextRender className=\"avtr-disp-name\">\n              {displayName}\n            </TextRender>\n          )}\n          {furtherInfo && (\n            <TextRender className=\"avtr-furth-info\">{furtherInfo}</TextRender>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nAvatar.propTypes = {\n  /**\n   * Defines the avatar size\n   */\n  size: Size,\n  /**\n   * Defines the avatar shape\n   */\n  shape: PropTypes.oneOf(['rounded', 'square']),\n  /**\n   * The avatar image source\n   */\n  src: PropTypes.string,\n  /**\n   * Shows the user's initials rather than her/his face\n   */\n  initials: PropTypes.string,\n  /**\n   * The avatar image alternative text\n   */\n  alt: PropTypes.string,\n  /**\n   * Shows a pill right under the image\n   */\n  pill: PillProp,\n  /**\n   * Defines the avatar shape\n   */\n  state: PropTypes.oneOf(['offline', 'online', 'danger']),\n  /**\n   * Defines the user display name\n   */\n  displayName: PropTypes.string,\n  /**\n   * Defines some further user's information\n   */\n  furtherInfo: PropTypes.string,\n  /**\n   * A render function to be used as the image component instead of the default one\n   */\n  ImageRender: PropTypes.elementType,\n  /**\n   * A render function to be used as the text component instead of the default one\n   */\n  TextRender: PropTypes.elementType,\n  /**\n   * A render function to be used as the wrapper element component instead of the default one\n   */\n  ElementRender: PropTypes.elementType,\n};\n\nAvatar.defaultProps = {\n  size: 'default',\n  shape: 'rounded',\n  src: undefined,\n  initials: undefined,\n  alt: 'Avatar image',\n  pill: undefined,\n  state: undefined,\n  displayName: '',\n  furtherInfo: '',\n  ImageRender: Image,\n  TextRender: Paragraph,\n  ElementRender: 'div',\n};\n\nexport default React.memo(Avatar);\n"],"file":"Avatar.js"}