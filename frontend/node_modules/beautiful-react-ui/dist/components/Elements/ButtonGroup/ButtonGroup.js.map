{"version":3,"sources":["components/Elements/ButtonGroup/ButtonGroup.js"],"names":["cloneButton","buttonInstance","props","Button","React","cloneElement","ButtonGroup","children","className","fluid","id","style","classList","color","outline","rounded","Children","map","child","propTypes","Color","size","Size","PropTypes","bool","node","defaultProps","memo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AASA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,cAAD,EAAiBC,KAAjB,EAA2B;AAC7C,sCAAuBD,cAAvB,EAAuC,CAACE,eAAD,CAAvC,EAAiD,QAAjD;AAEA,SAAOC,eAAMC,YAAN,CAAmBJ,cAAnB,EAAmCC,KAAnC,CAAP;AACD,CAJD;;AAUA,IAAMI,WAAW,GAAG,SAAdA,WAAc,OAAyD;AAAA,MAAtDC,QAAsD,QAAtDA,QAAsD;AAAA,MAA5CC,SAA4C,QAA5CA,SAA4C;AAAA,MAAjCC,KAAiC,QAAjCA,KAAiC;AAAA,MAA1BC,EAA0B,QAA1BA,EAA0B;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAZT,KAAY;;AAI3E,MAAMU,SAAS,GAAG,yBAAW,iBAAX,sBAA2CV,KAAK,CAACW,KAAjD,GAA0D;AAC1E,mBAAeJ,KAD2D;AAE1E,qBAAiBP,KAAK,CAACY,OAFmD;AAG1E,qBAAiBZ,KAAK,CAACa;AAHmD,GAA1D,EAIfP,SAJe,CAAlB;AAOA,SACE;AAAM,IAAA,SAAS,EAAEI,SAAjB;AAA4B,IAAA,EAAE,EAAEF,EAAhC;AAAoC,IAAA,KAAK,EAAEC;AAA3C,KACGK,gBAASC,GAAT,CAAaV,QAAb,EAAuB,UAACW,KAAD;AAAA,WAAWlB,WAAW,CAACkB,KAAD,EAAQhB,KAAR,CAAtB;AAAA,GAAvB,CADH,CADF;AAKD,CAhBD;;AAmBAI,WAAW,CAACa,SAAZ,GAAwB;AAKtBN,EAAAA,KAAK,EAAEO,aALe;AAStBC,EAAAA,IAAI,EAAEC,YATgB;AAatBR,EAAAA,OAAO,EAAES,mBAAUC,IAbG;AAiBtBT,EAAAA,OAAO,EAAEQ,mBAAUC,IAjBG;AAqBtBf,EAAAA,KAAK,EAAEc,mBAAUC,IArBK;AAyBtBjB,EAAAA,QAAQ,EAAEgB,mBAAUE;AAzBE,CAAxB;AA4BAnB,WAAW,CAACoB,YAAZ,GAA2B;AACzBb,EAAAA,KAAK,EAAE,SADkB;AAEzBQ,EAAAA,IAAI,EAAE,SAFmB;AAGzBP,EAAAA,OAAO,EAAE,KAHgB;AAIzBC,EAAAA,OAAO,EAAE,KAJgB;AAKzBN,EAAAA,KAAK,EAAE,KALkB;AAMzBF,EAAAA,QAAQ,EAAE;AANe,CAA3B;;eASeH,eAAMuB,IAAN,CAAWrB,WAAX,C","sourcesContent":["import React, { Children } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Color, Size, checkOnAllowedChildren } from '../../../shared';\nimport Button from '../Button';\n\nimport './button.group.scss';\n\n/**\n * overrides the button instance's props with the group ones\n * @param buttonInstance\n * @param props\n */\nconst cloneButton = (buttonInstance, props) => {\n  checkOnAllowedChildren(buttonInstance, [Button], 'Button');\n\n  return React.cloneElement(buttonInstance, props);\n};\n\n/**\n * Wraps a number of buttons and makes a group out of them\n */\n// eslint-disable-next-line react/prop-types\nconst ButtonGroup = ({ children, className, fluid, id, style, ...props }) => {\n  // the reason I'm disabling eslint \"react/destructuring-assignment\" rule is that I want to keep some props within the\n  // props constant, as it will then be passed as a parameter to the cloneButton function.\n  /* eslint-disable react/destructuring-assignment */\n  const classList = classNames('bi bi-btn-group', `btn-group-${props.color}`, {\n    'group-fluid': fluid,\n    'group-outline': props.outline,\n    'group-rounded': props.rounded,\n  }, className);\n  /* eslint-enable react/destructuring-assignment */\n\n  return (\n    <span className={classList} id={id} style={style}>\n      {Children.map(children, (child) => cloneButton(child, props))}\n    </span>\n  );\n};\n\n\nButtonGroup.propTypes = {\n  /**\n   * Defines the buttons color, can be `default`, `primary`, `secondary`, `info`, `warning`, `success`, `danger`\n   * or `transparent`\n   */\n  color: Color,\n  /**\n   * Defines the buttons' size, can be `small`, `default`, `large`\n   */\n  size: Size,\n  /**\n   * Applies the outline style to the buttons\n   */\n  outline: PropTypes.bool,\n  /**\n   * Makes the buttons rounded\n   */\n  rounded: PropTypes.bool,\n  /**\n   * Makes the button completely fluid (full width)\n   */\n  fluid: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n};\n\nButtonGroup.defaultProps = {\n  color: 'default',\n  size: 'default',\n  outline: false,\n  rounded: false,\n  fluid: false,\n  children: null,\n};\n\nexport default React.memo(ButtonGroup);\n"],"file":"ButtonGroup.js"}