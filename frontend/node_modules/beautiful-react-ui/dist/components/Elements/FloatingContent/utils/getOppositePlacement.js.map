{"version":3,"sources":["components/Elements/FloatingContent/utils/getOppositePlacement.js"],"names":["getOppositePlacement","el","placement","bounding","placementCoords","split","h","window","innerHeight","document","documentElement","clientHeight","w","innerWidth","clientWidth","top","bottom","left","right","oppositePosition"],"mappings":";;;;;;;;;AAGA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,EAAD,EAAKC,SAAL,EAAmB;AAC9C,MAAMC,QAAQ,GAAGF,EAAjB;AACA,MAAMG,eAAe,GAAGF,SAAS,CAACG,KAAV,CAAgB,GAAhB,CAAxB;AACA,MAAMC,CAAC,GAAGC,MAAM,CAACC,WAAP,IAAsBC,QAAQ,CAACC,eAAT,CAAyBC,YAAzD;AACA,MAAMC,CAAC,GAAGL,MAAM,CAACM,UAAP,IAAqBJ,QAAQ,CAACC,eAAT,CAAyBI,WAAxD;;AAEA,MAAIX,QAAQ,CAACY,GAAT,GAAe,CAAf,IAAoBX,eAAe,CAAC,CAAD,CAAf,KAAuB,KAA/C,EAAsD;AACpDA,IAAAA,eAAe,CAAC,CAAD,CAAf,GAAqB,QAArB;AACD;;AACD,MAAID,QAAQ,CAACa,MAAT,GAAkBV,CAAlB,IAAuBF,eAAe,CAAC,CAAD,CAAf,KAAuB,QAAlD,EAA4D;AAC1DA,IAAAA,eAAe,CAAC,CAAD,CAAf,GAAqB,KAArB;AACD;;AAOD,MAAID,QAAQ,CAACc,IAAT,GAAgB,CAApB,EAAuB;AACrB,QAAIb,eAAe,CAAC,CAAD,CAAf,KAAuB,MAA3B,EAAmC;AACjCA,MAAAA,eAAe,CAAC,CAAD,CAAf,GAAqB,OAArB;AACD;;AACD,QAAIA,eAAe,CAAC,CAAD,CAAf,KAAuB,OAA3B,EAAoC;AAClCA,MAAAA,eAAe,CAAC,CAAD,CAAf,GAAqB,MAArB;AACD;AACF;;AAED,MAAID,QAAQ,CAACe,KAAT,GAAiBN,CAArB,EAAwB;AACtB,QAAIR,eAAe,CAAC,CAAD,CAAf,KAAuB,OAA3B,EAAoC;AAClCA,MAAAA,eAAe,CAAC,CAAD,CAAf,GAAqB,MAArB;AACD;;AACD,QAAIA,eAAe,CAAC,CAAD,CAAf,KAAuB,MAA3B,EAAmC;AACjCA,MAAAA,eAAe,CAAC,CAAD,CAAf,GAAqB,OAArB;AACD;AACF;;AACD,MAAMe,gBAAgB,aAAMf,eAAe,CAAC,CAAD,CAArB,cAA4BA,eAAe,CAAC,CAAD,CAA3C,CAAtB;AAEA,SAAOe,gBAAP;AACD,CAtCD;;eAwCenB,oB","sourcesContent":["/**\n * This function returns the reverse of the given placement\n */\nconst getOppositePlacement = (el, placement) => {\n  const bounding = el;\n  const placementCoords = placement.split('-');\n  const h = window.innerHeight || document.documentElement.clientHeight;\n  const w = window.innerWidth || document.documentElement.clientWidth;\n\n  if (bounding.top < 0 && placementCoords[0] === 'top') {\n    placementCoords[0] = 'bottom';\n  }\n  if (bounding.bottom > h && placementCoords[0] === 'bottom') {\n    placementCoords[0] = 'top';\n  }\n\n  /**\n   * If placement is left-center or right-center, the opposite are respectively right-center and left-center\n   * but if the placement is, for example, bottom-right and there's not enough space for the element to be shown,,\n   * it means that there is not enough space on the LEFT of the element, so it's opposite will bottom-left.\n   */\n  if (bounding.left < 0) {\n    if (placementCoords[0] === 'left') {\n      placementCoords[0] = 'right';\n    }\n    if (placementCoords[1] === 'right') {\n      placementCoords[1] = 'left';\n    }\n  }\n\n  if (bounding.right > w) {\n    if (placementCoords[0] === 'right') {\n      placementCoords[0] = 'left';\n    }\n    if (placementCoords[1] === 'left') {\n      placementCoords[1] = 'right';\n    }\n  }\n  const oppositePosition = `${placementCoords[0]}-${placementCoords[1]}`;\n\n  return oppositePosition;\n};\n\nexport default getOppositePlacement;\n"],"file":"getOppositePlacement.js"}