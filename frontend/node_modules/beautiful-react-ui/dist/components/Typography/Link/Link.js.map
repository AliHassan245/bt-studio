{"version":3,"sources":["components/Typography/Link/Link.js"],"names":["Link","props","href","color","children","className","ElementRender","rest","classList","propTypes","PropTypes","string","isRequired","Color","elementType","defaultProps","React","memo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAaA,IAAMA,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AAAA,MACdC,IADc,GAC+CD,KAD/C,CACdC,IADc;AAAA,MACRC,KADQ,GAC+CF,KAD/C,CACRE,KADQ;AAAA,MACDC,QADC,GAC+CH,KAD/C,CACDG,QADC;AAAA,MACSC,SADT,GAC+CJ,KAD/C,CACSI,SADT;AAAA,MACoBC,aADpB,GAC+CL,KAD/C,CACoBK,aADpB;AAAA,MACsCC,IADtC,4BAC+CN,KAD/C;;AAEtB,MAAMO,SAAS,GAAG,oBAAQ;AAAA,WAAM,yBAAW,YAAX,oBAAoCL,KAApC,GAA6CE,SAA7C,CAAN;AAAA,GAAR,EAAuE,CAACF,KAAD,EAAQE,SAAR,CAAvE,CAAlB;AAEA,SAAQ,6BAAC,aAAD;AAAe,IAAA,IAAI,EAAEH,IAArB;AAA2B,IAAA,SAAS,EAAEM;AAAtC,KAAqDD,IAArD,GAA4DH,QAA5D,CAAR;AACD,CALD;;AAOAJ,IAAI,CAACS,SAAL,GAAiB;AAIfP,EAAAA,IAAI,EAAEQ,mBAAUC,MAAV,CAAiBC,UAJR;AASfT,EAAAA,KAAK,EAAEU,aATQ;AAafP,EAAAA,aAAa,EAAEI,mBAAUI;AAbV,CAAjB;AAiBAd,IAAI,CAACe,YAAL,GAAoB;AAClBZ,EAAAA,KAAK,EAAE,SADW;AAElBG,EAAAA,aAAa,EAAE;AAFG,CAApB;;eAKeU,eAAMC,IAAN,CAAWjB,IAAX,C","sourcesContent":["import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Color } from '../../../shared';\n\nimport './link.scss';\n\n/**\n * beautiful-react-ui does not force the developer to use its own styles nor creates extra global rules that can\n * possibly collide with the application's ones.<br/>\n * For this reason, in order to have the consistent style between the UI components and the texts, few typography\n * specialised components has been created.<br/>\n * The typography specialised components are used within the library itself.\n * <br/>\n * Here's the Link component.\n */\nconst Link = (props) => {\n  const { href, color, children, className, ElementRender, ...rest } = props;\n  const classList = useMemo(() => classNames('bi bi-link', `bi-link-${color}`, className), [color, className]);\n\n  return (<ElementRender href={href} className={classList} {...rest}>{children}</ElementRender>);\n};\n\nLink.propTypes = {\n  /**\n   * Defines the link href\n   */\n  href: PropTypes.string.isRequired,\n  /*\n   * Defines the link color, can be one of the following:\n   * `default`, `primary`, `secondary`, `info`, `warning`, `success`, `danger`.\n   */\n  color: Color,\n  /**\n   * A renderer to replace the link element\n   */\n  ElementRender: PropTypes.elementType,\n};\n\n\nLink.defaultProps = {\n  color: 'primary',\n  ElementRender: 'a',\n};\n\nexport default React.memo(Link);\n"],"file":"Link.js"}