{"version":3,"sources":["components/Layout/List/List.js"],"names":["assignColor","item","color","React","cloneElement","props","List","memo","condensed","className","bordered","children","rest","classList","Children","map","propTypes","Color","PropTypes","bool","defaultProps","Item","ListItem"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAOA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAOC,KAAP;AAAA,SAAiBC,eAAMC,YAAN,CAAmBH,IAAnB,EAAyB;AAAEC,IAAAA,KAAK,EAAED,IAAI,CAACI,KAAL,CAAWH,KAAX,IAAoBA;AAA7B,GAAzB,CAAjB;AAAA,CAApB;;AAMA,IAAMI,IAAI,GAAGH,eAAMI,IAAN,CAAW,UAACF,KAAD,EAAW;AAAA,MACzBH,KADyB,GACoCG,KADpC,CACzBH,KADyB;AAAA,MAClBM,SADkB,GACoCH,KADpC,CAClBG,SADkB;AAAA,MACPC,SADO,GACoCJ,KADpC,CACPI,SADO;AAAA,MACIC,QADJ,GACoCL,KADpC,CACIK,QADJ;AAAA,MACcC,QADd,GACoCN,KADpC,CACcM,QADd;AAAA,MAC2BC,IAD3B,4BACoCP,KADpC;;AAEjC,MAAMQ,SAAS,GAAG,yBAAW,YAAX,oBAAoCX,KAApC,GAA6C;AAC7D,yBAAqBM,SADwC;AAE7D,wBAAoBE;AAFyC,GAA7C,EAGfD,SAHe,CAAlB;AAKA,SACE;AAAI,IAAA,SAAS,EAAEI;AAAf,KAA8BD,IAA9B,GACGV,KAAK,GAAGY,gBAASC,GAAT,CAAaJ,QAAb,EAAuB,UAACV,IAAD;AAAA,WAAUD,WAAW,CAACC,IAAD,EAAOC,KAAP,CAArB;AAAA,GAAvB,CAAH,GAAgES,QADxE,CADF;AAKD,CAZY,CAAb;;AAeAL,IAAI,CAACU,SAAL,GAAiB;AAKfd,EAAAA,KAAK,EAAEe,aALQ;AASfT,EAAAA,SAAS,EAAEU,mBAAUC,IATN;AAafT,EAAAA,QAAQ,EAAEQ,mBAAUC;AAbL,CAAjB;AAgBAb,IAAI,CAACc,YAAL,GAAoB;AAClBlB,EAAAA,KAAK,EAAE,SADW;AAElBM,EAAAA,SAAS,EAAE,KAFO;AAGlBE,EAAAA,QAAQ,EAAE;AAHQ,CAApB;AAOAJ,IAAI,CAACe,IAAL,GAAYC,iBAAZ;eAEehB,I","sourcesContent":["import React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ListItem from './ListItem';\nimport { Color } from '../../../shared';\n\nimport './list.scss';\n\n/**\n * Clones an item by passing the given color prop, if it doesn't exist yet\n */\nconst assignColor = (item, color) => React.cloneElement(item, { color: item.props.color || color });\n\n/**\n * A List component wraps and formats a series of line items.\n */\n// the React.memo has been used here rather than on the export line like other cases, to avoid wrapping the shortcut.\nconst List = React.memo((props) => {\n  const { color, condensed, className, bordered, children, ...rest } = props;\n  const classList = classNames('bi bi-list', `bi-list-${color}`, {\n    'bi-list-condensed': condensed,\n    'bi-list-bordered': bordered,\n  }, className);\n\n  return (\n    <ul className={classList} {...rest}>\n      {color ? Children.map(children, (item) => assignColor(item, color)) : children}\n    </ul>\n  );\n});\n\n\nList.propTypes = {\n  /*\n   * Defines the list color, can be one of the following:\n   * `default`, `primary`, `secondary`, `info`, `warning`, `success`, `danger`.\n   */\n  color: Color,\n  /*\n   * Shrinks the list items so that it's possible to display more information\n   */\n  condensed: PropTypes.bool,\n  /*\n   * Defines whether the list should be bordered or not\n   */\n  bordered: PropTypes.bool,\n};\n\nList.defaultProps = {\n  color: 'default',\n  condensed: false,\n  bordered: false,\n};\n\n// shortcut to ListItem so that we can use it as the following: `List.Item`\nList.Item = ListItem;\n\nexport default List;\n"],"file":"List.js"}