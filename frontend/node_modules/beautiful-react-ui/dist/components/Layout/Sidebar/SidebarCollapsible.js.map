{"version":3,"sources":["components/Layout/Sidebar/SidebarCollapsible.js"],"names":["animateToClose","element","style","height","animateToOpen","scrollHeight","SidebarCollapsible","orientation","props","text","icon","LinkRender","ElementRender","ListRender","children","current","showOpen","className","rest","collapsibleRef","isOpen","setIsOpen","classList","handleClick","event","preventDefault","animatingFunction","charAt","propTypes","PropTypes","string","isRequired","IconProp","bool","elementType","defaultProps","undefined","SidebarLink","React","memo"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect, useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport SidebarLink from './SidebarLink';\nimport Caret from '../../Elements/_Caret';\nimport { IconProp, makeIconFromProp } from '../../../shared';\n\nimport './sidebar-collapsible.scss';\n\n/* eslint-disable no-param-reassign */\nconst animateToClose = (element) => {\n  element.style.height = '0px';\n};\n\nconst animateToOpen = (element) => {\n  element.style.height = `${element.scrollHeight}px`;\n};\n/* eslint-enable no-param-reassign */\n\n/**\n * Collapsible\n */\n// eslint-disable-next-line react/prop-types\nconst SidebarCollapsible = ({ orientation, ...props }) => {\n  const { text, icon, LinkRender, ElementRender, ListRender, children, current, showOpen, className, ...rest } = props;\n  const collapsibleRef = useRef();\n  const [isOpen, setIsOpen] = useState(showOpen || !!current);\n\n  const classList = useMemo(() => classNames('bi bi-sidebar-nav-item sidebar-collapsible', {\n    'sidebar-collapsible-open': isOpen,\n  }, className), [isOpen, className]);\n\n  const handleClick = useCallback((event) => {\n    event.preventDefault();\n    setIsOpen(!isOpen);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (current) {\n      setIsOpen(true);\n    }\n  }, [current]);\n\n  useEffect(() => {\n    if (collapsibleRef.current) {\n      const animatingFunction = !isOpen ? animateToClose : animateToOpen;\n      animatingFunction(collapsibleRef.current);\n    }\n  }, [isOpen, collapsibleRef.current]);\n\n  return (\n    <ElementRender className={classList} {...rest}>\n      <LinkRender onClick={handleClick} to=\"#\">\n        {icon && (<span className=\"bi-sidebar-icon\">{makeIconFromProp(icon)}</span>)}\n        <span className=\"bi-sidebar-item-content\">{text}</span>\n        <div className=\"bi-sidebar-item-shrunk\">\n          {!icon && typeof text === 'string' && (<span className=\"shrunk-text\">{text.charAt(0)}</span>)}\n          {icon && makeIconFromProp(icon)}\n        </div>\n        <Caret />\n      </LinkRender>\n      <ListRender className=\"sidebar-collapsible-content\" ref={collapsibleRef}>\n        {children}\n      </ListRender>\n    </ElementRender>\n  );\n};\n\nSidebarCollapsible.propTypes = {\n  text: PropTypes.string.isRequired,\n  icon: IconProp,\n  current: PropTypes.bool,\n  LinkRender: PropTypes.elementType,\n  showOpen: PropTypes.bool,\n  ElementRender: PropTypes.elementType,\n  ListRender: PropTypes.elementType,\n};\n\nSidebarCollapsible.defaultProps = {\n  icon: undefined,\n  current: false,\n  LinkRender: SidebarLink,\n  showOpen: false,\n  ElementRender: 'li',\n  ListRender: 'ul',\n};\n\nexport default React.memo(SidebarCollapsible);\n"],"file":"SidebarCollapsible.js"}