"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.weak-map");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.symbol");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.to-string");

require("core-js/modules/es6.object.keys");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _shared = require("../../../shared");

var _SidebarItem = _interopRequireDefault(require("./SidebarItem"));

var _SidebarCollapsible = _interopRequireDefault(require("./SidebarCollapsible"));

var _SidebarGroup = _interopRequireDefault(require("./SidebarGroup"));

var _SidebarHeader = _interopRequireDefault(require("./SidebarHeader"));

var _SidebarDivider = _interopRequireDefault(require("./SidebarDivider"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var enrichChild = function enrichChild(child, orientation) {
  (0, _shared.checkOnAllowedChildren)(child, [_SidebarCollapsible.default, _SidebarDivider.default, _SidebarItem.default], 'Sidebar');
  return _react.default.cloneElement(child, {
    orientation: orientation
  });
};

var Sidebar = _react.default.memo(function (props) {
  var isOpen = props.isOpen,
      onToggle = props.onToggle,
      title = props.title,
      titleColor = props.titleColor,
      headerLogo = props.headerLogo,
      showToggle = props.showToggle,
      toggleIcon = props.toggleIcon,
      accent = props.accent,
      orientation = props.orientation,
      type = props.type,
      transitionType = props.transitionType,
      className = props.className,
      children = props.children,
      HeaderRender = props.HeaderRender,
      ElementRender = props.ElementRender,
      NavRender = props.NavRender,
      rest = _objectWithoutProperties(props, ["isOpen", "onToggle", "title", "titleColor", "headerLogo", "showToggle", "toggleIcon", "accent", "orientation", "type", "transitionType", "className", "children", "HeaderRender", "ElementRender", "NavRender"]);

  var classList = (0, _react.useMemo)(function () {
    var _classNames;

    return (0, _classnames.default)('bi bi-sidebar', (_classNames = {
      'sidebar-open': isOpen
    }, _defineProperty(_classNames, "sidebar-".concat(accent), !!accent), _defineProperty(_classNames, "sidebar-".concat(orientation), !!orientation), _defineProperty(_classNames, "sidebar-".concat(type), !!type), _defineProperty(_classNames, "sidebar-".concat(transitionType), !!transitionType), _classNames), className);
  }, [isOpen, type, accent, orientation, transitionType, className]);
  return _react.default.createElement(ElementRender, _extends({
    className: classList
  }, rest), _react.default.createElement(HeaderRender, {
    title: !title && !headerLogo ? 'Sidebar' : title,
    titleColor: titleColor,
    showToggle: showToggle,
    toggleIcon: toggleIcon,
    logo: headerLogo,
    onToggle: onToggle
  }), _react.default.createElement(NavRender, {
    className: "bi-sidebar-navigation"
  }, _react.default.createElement("ul", null, _react.Children.map(children, function (child) {
    return enrichChild(child, orientation);
  }))));
});

Sidebar.propTypes = {
  isOpen: _propTypes.default.bool.isRequired,
  onToggle: _propTypes.default.func,
  accent: _shared.Color,
  title: _propTypes.default.string,
  titleColor: _shared.Color,
  headerLogo: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.elementType]),
  toggleIcon: _shared.IconProp,
  showToggle: _propTypes.default.bool,
  orientation: _propTypes.default.oneOf(['left', 'right']),
  type: _propTypes.default.oneOf(['shrinkable', 'offcanvas']),
  transitionType: _propTypes.default.oneOf(['translate', 'margin']),
  HeaderRender: _propTypes.default.elementType,
  ElementRender: _propTypes.default.elementType,
  NavRender: _propTypes.default.elementType
};
Sidebar.defaultProps = {
  onToggle: undefined,
  accent: 'primary',
  title: undefined,
  titleColor: 'default',
  headerLogo: undefined,
  toggleIcon: 'bars',
  showToggle: true,
  HeaderRender: _SidebarHeader.default,
  orientation: 'left',
  type: 'shrinkable',
  transitionType: 'translate',
  ElementRender: 'aside',
  NavRender: 'nav'
};
Sidebar.Item = _SidebarItem.default;
Sidebar.Collapsible = _SidebarCollapsible.default;
Sidebar.Divider = _SidebarDivider.default;
Sidebar.Group = _SidebarGroup.default;
var _default = Sidebar;
exports.default = _default;
//# sourceMappingURL=Sidebar.js.map
