"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.weak-map");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.symbol");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.to-string");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.function.name");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Title = _interopRequireDefault(require("../../Typography/Title"));

var _Paragraph = _interopRequireDefault(require("../../Typography/Paragraph"));

var _List = _interopRequireDefault(require("../../Layout/List"));

var _FileItem = _interopRequireDefault(require("./FileItem"));

var _useFileUploaderHandlers = _interopRequireDefault(require("./utils/useFileUploaderHandlers"));

var _shared = require("../../../shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FileUploader = function FileUploader(props) {
  var uploads = props.uploads,
      onChange = props.onChange,
      icon = props.icon,
      title = props.title,
      subtitle = props.subtitle,
      multiple = props.multiple,
      accept = props.accept,
      uploadingFn = props.uploadingFn,
      removeLabel = props.removeLabel,
      uploadingLabel = props.uploadingLabel,
      ElementRender = props.ElementRender,
      TitleRender = props.TitleRender,
      SubtitleRender = props.SubtitleRender,
      ListRender = props.ListRender,
      FileItemRender = props.FileItemRender,
      className = props.className,
      rest = _objectWithoutProperties(props, ["uploads", "onChange", "icon", "title", "subtitle", "multiple", "accept", "uploadingFn", "removeLabel", "uploadingLabel", "ElementRender", "TitleRender", "SubtitleRender", "ListRender", "FileItemRender", "className"]);

  var fuHandlers = (0, _useFileUploaderHandlers.default)(uploads, multiple, onChange);
  var onFilesChange = fuHandlers.onFilesChange,
      onFileRemove = fuHandlers.onFileRemove,
      clickHandler = fuHandlers.clickHandler,
      dropZoneRef = fuHandlers.dropZoneRef,
      inputRef = fuHandlers.inputRef,
      isOver = fuHandlers.isOver;
  var classList = (0, _react.useMemo)(function () {
    return (0, _classnames.default)('bi bi-file-uploader', {
      'file-dropping': isOver
    }, className);
  }, [className, isOver]);
  return _react.default.createElement(ElementRender, _extends({
    className: classList,
    onClick: clickHandler,
    tabIndex: 0,
    role: "button"
  }, rest), _react.default.createElement("div", {
    className: "bi-file-uploader-content",
    ref: dropZoneRef
  }, _react.default.createElement("div", {
    className: "bi-drop-icon"
  }, !!icon && (0, _shared.makeIconFromProp)(icon)), _react.default.createElement(TitleRender, {
    tagName: "h4"
  }, title), subtitle && _react.default.createElement(SubtitleRender, null, subtitle)), uploads && uploads.length > 0 && _react.default.createElement(ListRender, {
    bordered: true,
    className: "bi bi-uploaded-files"
  }, uploads.map(function (upload, index) {
    return _react.default.createElement(FileItemRender, {
      removeLabel: removeLabel,
      key: upload.file.name,
      file: upload.file,
      uploadingFn: uploadingFn,
      uploadingLabel: uploadingLabel,
      onRemove: onFileRemove(index)
    });
  })), _react.default.createElement("input", {
    type: "file",
    accept: accept,
    multiple: multiple,
    ref: inputRef,
    onChange: onFilesChange
  }));
};

FileUploader.propTypes = {
  uploads: _propTypes.default.arrayOf(_propTypes.default.shape({
    file: _propTypes.default.instanceOf(File).isRequired,
    byteSent: _propTypes.default.number,
    uploading: _propTypes.default.bool
  })),
  onChange: _propTypes.default.func,
  uploadingFn: _propTypes.default.func,
  title: _propTypes.default.string,
  subtitle: _propTypes.default.string,
  icon: _shared.IconProp,
  multiple: _propTypes.default.bool,
  accept: _propTypes.default.string,
  removeLabel: _propTypes.default.string,
  uploadingLabel: _propTypes.default.string,
  ElementRender: _propTypes.default.elementType,
  TitleRender: _propTypes.default.elementType,
  SubtitleRender: _propTypes.default.elementType,
  FileItemRender: _propTypes.default.elementType,
  ListRender: _propTypes.default.elementType
};
FileUploader.defaultProps = {
  uploads: undefined,
  onChange: undefined,
  uploadingFn: undefined,
  title: 'Drop file(s) here or click to upload',
  removeLabel: 'Remove',
  uploadingLabel: 'Uploading',
  subtitle: undefined,
  multiple: false,
  accept: undefined,
  icon: 'cloud-upload-alt',
  TitleRender: _Title.default,
  SubtitleRender: _Paragraph.default,
  ElementRender: 'div',
  FileItemRender: _FileItem.default,
  ListRender: _List.default
};

var _default = _react.default.memo(FileUploader);

exports.default = _default;
//# sourceMappingURL=FileUploader.js.map
